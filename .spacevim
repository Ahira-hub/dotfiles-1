set nocompatible
filetype plugin on
syntax on
let mapleader = "\<Space>"
set encoding=utf8
set guifont=Monoisome\ 12
set t_Co=256
set laststatus=2
set viminfo=""
set noswapfile
set autoread

filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

set showbreak=↪\
set listchars=tab:→\ ,extends:›,precedes:‹,nbsp:␣,trail:·
set list
set ruler
set showcmd " display incomplete commands
set showmode " display current modes<Paste>
set display+=lastline
set smartindent
set smarttab
set shiftround
set hlsearch
set incsearch
set ignorecase smartcase
set smartcase
set expandtab
set ttyfast
set nobackup
set noswapfile
set nowritebackup
set iskeyword-=_,.,=,-,:,
set foldmethod=indent

set completeopt=longest,menu
set wildmenu " show a navigable menu for tab completion
set wildmode=longest,list,full
set wildignore=*.o,*~,*.pyc,*.class,*.so,*.zip
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set backspace=indent,eol,start  " make that backspace key work the way it should
set whichwrap+=<,>,h,l
set nowrap                            " Don't wrap long lines
set listchars=extends:→               " Show arrow if line continues rightwards
set listchars+=precedes:← " Show arrow if line continues leftwards

set scrolloff=5       " Leave 5 lines of buffer when scrolling
set sidescrolloff=10 " Leave 10 characters of horizontal buffer when scrolling

function! UserInit()
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  Plug 'w0rp/ale'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'junegunn/seoul256.vim'
  Plug 'vim-airline/vim-airline-themes'
  Plug 'vim-airline/vim-airline'
  Plug 'edkolev/promptline.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'ryanoasis/vim-devicons'
  Plug 'scrooloose/syntastic'
  Plug 'dbgx/lldb.nvim'
  Plug 'Yggdroot/indentLine'
  Plug 'tpope/vim-surround'
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'
  Plug 'easymotion/vim-easymotion'
  Plug 'kien/ctrlp.vim'
  Plug 'raimondi/delimitmate'
  Plug 'sheerun/vim-polyglot'
  Plug 'francoiscabrol/ranger.vim'
  Plug 'rbgrouleff/bclose.vim'

  Plug 'othree/xml.vim'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug 'powerman/vim-plugin-viewdoc'
  Plug 'rhysd/vim-grammarous'
  Plug 'vimwiki/vimwiki'
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'vim-pandoc/vim-pandoc-syntax'
  Plug 'reedes/vim-pencil'
  Plug 'godlygeek/tabular'
  Plug 'plasticboy/vim-markdown'
  Plug '907th/vim-auto-save'
  Plug '~/.fzf'
  Plug 'dylanaraps/wal.vim'
endfunction

let spacevim_plug_home = '~/.vim/plugged'
let g:spacevim_layers = [
      \ 'fzf', 'unite', 'better-defaults',
      \ 'which-key', 'airline',
      \ ]
if g:spacevim_gui
  Layer 'airline'
endif


augroup markdown
  autocmd!
  autocmd FileType markdown,tex,wiki AutoSaveToggle
  autocmd FileType markdown,tex,wiki Pencil
  autocmd FileType markdown,tex,wiki set spelllang=en_gb spell
augroup END

function! UserConfig()
  colorscheme wal
  hi CursorLine ctermfg=15 ctermbg=235 cterm=bold
  hi CursorColumn ctermfg=15 ctermbg=235 cterm=bold
  let g:airline_powerline_fonts=1
  let g:airline_theme='jellybeans'
  if g:spacevim_tmux
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  endif
endfunction

set cursorline
autocmd InsertEnter * highlight CursorLine ctermfg=15 ctermbg=235 cterm=bold
autocmd InsertLeave * highlight CursorLine ctermfg=15 ctermbg=235 cterm=bold
set cursorcolumn
autocmd InsertEnter * highlight CursorColumn ctermfg=15 ctermbg=235 cterm=bold
autocmd InsertLeave * highlight CursorColumn ctermfg=15 ctermbg=235 cterm=bold

set relativenumber number
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber nonumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber number
augroup END

map <C-n> :NERDTreeToggle<CR>
map <C-f> :FZF<CR>
noremap <C-End>   :bn<CR>
noremap <C-Home>   :bp<CR>

let g:vimwiki_list = [{'path': '~/Dots/.assets/.notes/', 'syntax': 'markdown', 'ext': '.wiki'}]


set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
let g:syntastic_cpp_check_header = 1
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
